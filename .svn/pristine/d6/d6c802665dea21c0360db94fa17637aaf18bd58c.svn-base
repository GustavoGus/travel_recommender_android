/**
 * 
 */
package adm.Activities;
import java.util.ArrayList;
import java.util.List;

import com.google.android.maps.*;

import adm.Repository.DataBaseManagement;
import adm.Repository.GlobalParameters;
import adm.Search.Search;
import adm.Search.SearchItem;
import adm.Search.SearchResponse;
import adm.Services.TrackingLocalization;
import adm.Submit.Checkin;
import adm.User.User;
import android.app.Activity;
import android.app.ActivityManager;
import android.app.ActivityManager.RunningServiceInfo;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Point;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.ToggleButton;

/**
 * @author AndroIT
 *
 */
public class DisfrutarActivity extends MapActivity {

	private final String PREFERENCES_DISFRUTAR = "PREFERENCES_DISFRUTAR";

	private Checkin checkIn = null;
	
	private boolean hotel = false;
	private boolean restaurant = false;
	private boolean bar = false;
	private boolean historical = false;
	private boolean transport = false;
	private MapController mapController = null;
	private MapView mapView = null;
	
	private Intent intentService = null;
	private String jsonStringSearch = "";
	private ArrayList<SearchItem> listLocations = new ArrayList<SearchItem>();
	private volatile Thread runner = null;
	private Handler h = null;
	private static boolean mapEnabled = false;
	
	public static boolean isMapEnabled() {
		return mapEnabled;
	}





	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		loadOptions();
		// Quitar barra de arriba.
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
				WindowManager.LayoutParams.FLAG_FULLSCREEN);
		// Aplicar layout
		setContentView(R.layout.disfrutar);

		//Creamos el 'checkin'
		checkIn = new Checkin();
		//Accedemos al MapView
		mapView = (MapView) findViewById(R.id.mapview);
		mapView.setBuiltInZoomControls(true);

		//Obtenemos el controlador del mapa
		mapController = mapView.getController();
		mapController.setZoom(13);
		
		mapController.setCenter(new GeoPoint((int)(39.47*1E6), (int)(-0.37*1E6)));
		

		
		//Creamos el thread y lo lanzamos
//		startThread();

		h = new Handler();
		h.post(new Task());

		
	}

	
	
	
	
	/**
	 * OnClick para el botón de Check-in
	 * @param v
	 */
	public void checkInOnClick(View v){
		try {
			checkIn.make_checkin(getParent(), null);
			Toast toastOk = Toast.makeText(getParent(), getResources().getString(R.string.checkin_ok),Toast.LENGTH_SHORT );
			toastOk.show();
			User currentUser = new User(GlobalParameters.BASE_URL_JSON, getParent());
			
			//Si estoy logueado...
			if(currentUser.hasAuthKey()){
			
			
			
			//management.createCoordsInfo(GlobalParameters., name, longitude, latitude, description)
			}
		} catch (Exception e) {
			Toast toastErr = Toast.makeText(getParent(), getResources().getString(R.string.checkin_error),Toast.LENGTH_SHORT );
			toastErr.show();

			e.printStackTrace();
		}
	}
	
	/**
	 * OnClick para el botón de 'add'
	 * @param v
	 */
	public void add_OnClick(View v){
		startActivity(new Intent(DisfrutarActivity.this, AddActivity.class));
	}
	
	
	/**
	 * OnClick para el botón de 'on'
	 * @param v
	 */
	public void on_OnClick(View v){
		ToggleButton tglOn = (ToggleButton) findViewById(R.id.tgbtn_on);
		if(tglOn.isChecked()){
			if(!isMyServiceRunning()){
				intentService = new Intent(DisfrutarActivity.this,TrackingLocalization.class);
				startService(intentService);
				mapEnabled = true;
				
			}
			
			
		}else{
			if(isMyServiceRunning()){
				stopService(intentService);	
				mapEnabled = false;
			}
			
		}
	}
	/**
	 * OnClick del toggleButton del hotel
	 * @param v
	 */
	public void hotel_OnClick(View v){
		hotel = ((ToggleButton)findViewById(R.id.tglbtn_hotel)).isChecked();
		Log.d("TAG_DISFRUTAR_BON_VOYAGE","hotel: "+hotel);
	}
	
	/**
	 * OnClick del toggleButton del hotel
	 * @param v
	 */
	public void restaurant_OnClick(View v){
		restaurant = ((ToggleButton)findViewById(R.id.tglbtn_restaurant)).isChecked();	
		Log.d("TAG_DISFRUTAR_BON_VOYAGE","restaurant: "+restaurant);

	}
	/**
	 * OnClick del toggleButton del bar
	 * @param v
	 */
	public void bar_OnClick(View v){
		bar = ((ToggleButton)findViewById(R.id.tglbtn_bar)).isChecked();
		Log.d("TAG_DISFRUTAR_BON_VOYAGE","bar: "+bar);

	}
	/**
	 * OnClick del toggleButton del museo
	 * @param v
	 */
	public void historical_OnClick(View v){
		historical = ((ToggleButton)findViewById(R.id.tglbtn_museum_historical)).isChecked();
		Log.d("TAG_DISFRUTAR_BON_VOYAGE","historical: "+historical);

	}
	/**
	 * OnClick del toggleButton del transporte
	 * @param v
	 */
	public void transport_OnClick(View v){
		transport = ((ToggleButton)findViewById(R.id.tglbtn_transport)).isChecked();
		Log.d("TAG_DISFRUTAR_BON_VOYAGE","transport: "+transport);

	}

	
	/*
	 * Con los siguientes métodos guardamos de manera persistente las opciones
	 * que el usuario ha seleccionado para filtrar la búsqueda en el mapa
	 */
	
	/**
	 * Método genérico para guardar las opciones en el shared preferences
	 */
	protected void saveOptions(){
		SharedPreferences preferences = getSharedPreferences(PREFERENCES_DISFRUTAR, 0);
		Editor preferences_editor = preferences.edit();
		
		preferences_editor.putBoolean("Historico", historical);
		preferences_editor.putBoolean("Transporte", transport);
		preferences_editor.putBoolean("Hotel", hotel);
		preferences_editor.putBoolean("Restaurantes", restaurant);
		preferences_editor.putBoolean("Copas", bar);
		
		preferences_editor.commit();
	}
	
	/**
	 * Método genérico para cargar las opciones del shared preferences
	 */
	protected void loadOptions(){
		SharedPreferences preferences = getSharedPreferences(PREFERENCES_DISFRUTAR, 0);

		historical = preferences.getBoolean("Historico", false);
		historical = preferences.getBoolean("Transporte", false);
		historical = preferences.getBoolean("Hotel", false);
		historical = preferences.getBoolean("Restaurantes", false);
		historical = preferences.getBoolean("Copas", false);
	}
	
	
	
	
	/**
	 * Cuando el usuario pulse back, guardamos las preferences
	 */
	
	@Override
	public void onBackPressed() {
		// TODO Auto-generated method stub
		saveOptions();
		super.onBackPressed();

	}

	/***
	 * Sobrecarga de métodos del ciclo de vida
	 */
	@Override
	protected void onDestroy() {
		// TODO Auto-generated method stub
		saveOptions();
//		stopThread();
		super.onDestroy();
	}

	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		saveOptions();
//		stopThread();
		super.onPause();
	}

	@Override
	protected void onRestart() {
		// TODO Auto-generated method stub
		saveOptions();
//		stopThread();
		super.onRestart();
		loadOptions();
//		startThread();
	}

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		loadOptions();
//		startThread();
	}

	@Override
	protected void onStart() {
		// TODO Auto-generated method stub
		super.onStart();
		loadOptions();
//		startThread();
	}

	@Override
	protected void onStop() {
		// TODO Auto-generated method stub
		saveOptions();
//		stopThread();
		super.onStop();
	}
	
	/**
	 * Tarea asíncrona para actualizar el mapa
	 * 
	 */
	
	private class Task implements Runnable {

			// Para las coordenadas
			double coorLat = 0.0;
			double coorLon = 0.0;
			// Para las busquedas
			Search busqueda;
			SearchResponse busquedaResponse;

			

			/* (non-Javadoc)
			 * @see java.lang.Runnable#run()
			 */
			public void run() {
				// TODO Auto-generated method stub

				
			try {


				// CITY|REGION|COUNTRY|CONTINENT|NATURAL|CULTURAL|POI|INFRASTRUCTURE|HOTEL|RESTAURANT|PUB|DISCO

				jsonStringSearch = "CITY|REGION|COUNTRY|CONTINENT";
				if(hotel){
					jsonStringSearch+="|HOTEL";
				}else if(restaurant){
					jsonStringSearch+="|RESTAURANT";
				}else if(bar){
					jsonStringSearch+="|PUB|DISCO";
				}else if(historical){
					jsonStringSearch+="|NATURAL|CULTURAL|POI";
				}else if(transport){
					jsonStringSearch+="|INFRASTRUCTURE";
				}

				// ---------------------------------------//
				// Bucle de tracking
			
				
						if(coorLat*100f != GlobalParameters.my_latitude &&
								coorLon*100f != GlobalParameters.my_longitude){
				
							coorLat = GlobalParameters.my_latitude/100f;
							coorLon = GlobalParameters.my_longitude/100f;
							
//							busqueda = new Search(GlobalParameters.BASE_URL_JSON);
//							busquedaResponse = busqueda
//									.location(
//											coorLon,
//											coorLat,
//											GlobalParameters.API_KEY,
//											"CITY|REGION|COUNTRY|CONTINENT|NATURAL|CULTURAL|POI|INFRASTRUCTURE|HOTEL|RESTAURANT|PUB|DISCO",
//											"");
//
//							listLocations = busquedaResponse.getResult();
							listLocations = TrackingLocalization.getListLocations();

						}
							
							mapController.animateTo(new GeoPoint((int)(coorLon*1E6), (int)(coorLat*1E6)));
							// ---------------------------------------//
							// Busco informacion alrededor mio
							
							
							ArrayList<DisfrutarMapPoints> mapOverlays = new ArrayList<DisfrutarActivity.DisfrutarMapPoints>();
						
    						//Obtengo los resultados
							//Obtengo la lista de overlays del mapa
							List<Overlay> listOverlays= mapView.getOverlays();
							
							/*
							 * Recorremos la lista de lugares, y vamos añadiendo
							 * aquellos que tenemos activados. 
							 */
							for(SearchItem item : listLocations){
								//Añadir overlay de hoteles
								if(hotel){
									if(item.getPlace_type().equals("HOTEL")){
										mapOverlays.add(new DisfrutarMapPoints(
												new GeoPoint((int)(item.getLatitude()*1E6), (int)(item.getLongitude()*1E6)), R.drawable.hotel));
									}
								//Añadir overlay de restaurantes
								}
								if(restaurant){
									if(item.getPlace_type().equals("RESTAURANT")){
										
										mapOverlays.add(new DisfrutarMapPoints(
												new GeoPoint((int)(item.getLatitude()*1E6), (int)(item.getLongitude()*1E6)), R.drawable.restaurant));
					
									}
								//Añadir overlay de bares/copas
								}
								if(bar){
									if(item.getPlace_type().equals("PUB") ||
										item.getPlace_type().equals("DISCO")){
										mapOverlays.add(new DisfrutarMapPoints(
												new GeoPoint((int)(item.getLatitude()*1E6), (int)(item.getLongitude()*1E6)), R.drawable.bar));
					
									}
								//Añadir overlay de museos-poi-naturaleza
								}
								if(historical){
									if(item.getPlace_type().equals("NATURAL") ||
											item.getPlace_type().equals("CULTURAL") ||
										item.getPlace_type().equals("POI")){
										mapOverlays.add(new DisfrutarMapPoints(
												new GeoPoint((int)(item.getLatitude()*1E6), (int)(item.getLongitude()*1E6)), R.drawable.museum_historical));
					
	
									}
								//Añadir overlay de transportes
								} if(transport){
									if(item.getPlace_type().equals("INFRASTRUCTURE")){
										mapOverlays.add(new DisfrutarMapPoints(
												new GeoPoint((int)(item.getLatitude()*1E6), (int)(item.getLongitude()*1E6)), R.drawable.transport));
					
									}
							}
						}//End for
						
							
						listOverlays.clear();
						
						for(int i = 0; i < mapOverlays.size(); i++){
							listOverlays.add(mapOverlays.get(i));	
						}
						try{
							System.gc();
							Thread.sleep(100);
						}catch(Exception e){
							
						}

						h = new Handler();
						h.post(new Task());

				
			} catch (Exception e) {
			}
		}
	}

	/* (non-Javadoc)
	 * @see com.google.android.maps.MapActivity#isRouteDisplayed()
	 */
	@Override
	protected boolean isRouteDisplayed() {
		// TODO Auto-generated method stub
		return false;
	}
	
	
	/*-------------------------------------------------*/
	/*
	 * Class overlays
	 */
	/**
	 * @author Julian
	 *
	 */
	public class DisfrutarMapPoints extends  Overlay{

		private GeoPoint p = null;
		private int drawable = 0;
		public DisfrutarMapPoints(GeoPoint p, int drawable){
			this.p = p;
			this.drawable = drawable;
		}
		
		public boolean draw(Canvas canvas, MapView mapView, boolean shadow, long when) {
			// TODO Auto-generated method stub
			super.draw(canvas, mapView, shadow);
			
				 //---translate the GeoPoint to screen pixels---
		        Point screenPts = new Point();
		        mapView.getProjection().toPixels(p, screenPts);

		        //---add the marker---
		        Bitmap bmp = BitmapFactory.decodeResource(
		            getResources(), drawable);            
		        canvas.drawBitmap(bmp, screenPts.x, screenPts.y-50, null);       
		        
			
	        return true;
		}

		@Override
		public boolean onTap(GeoPoint p, MapView mapView) {
			// TODO Auto-generated method stub
			return super.onTap(p, mapView);
		}
		
	}

	private boolean isMyServiceRunning() {
	    ActivityManager manager = (ActivityManager) getSystemService(ACTIVITY_SERVICE);
	    for (RunningServiceInfo service : manager.getRunningServices(Integer.MAX_VALUE)) {
	        if ("adm.Services.TrackingLocalization".equals(service.service.getClassName())) {
	            return true;
	        }
	    }
	    return false;
	}
	
}
