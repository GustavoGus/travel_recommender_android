/**
 * 
 */
package adm.Activities;
import java.util.ArrayList;
import java.util.List;

import org.osmdroid.DefaultResourceProxyImpl;
import org.osmdroid.util.GeoPoint;
import org.osmdroid.views.MapController;
import org.osmdroid.views.MapController.AnimationType;
import org.osmdroid.views.MapView;
import org.osmdroid.views.overlay.Overlay;
import org.osmdroid.views.overlay.OverlayItem;

import adm.Place.DisfrutarMapPoints;
import adm.Repository.DataBaseManagement;
import adm.Repository.GlobalParameters;
import adm.Search.Search;
import adm.Search.SearchItem;
import adm.Search.SearchResponse;
import adm.Services.TrackingLocalization;
import adm.Submit.Checkin;
import android.app.Activity;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.Toast;
import android.widget.ToggleButton;

/**
 * @author AndroIT
 *
 */
public class DisfrutarActivity extends Activity {

	private final String PREFERENCES_DISFRUTAR = "PREFERENCES_DISFRUTAR";

	private Checkin checkIn = null;
	
	private boolean hotel = false;
	private boolean restaurant = false;
	private boolean bar = false;
	private boolean historical = false;
	private boolean transport = false;
	private MapController mapController = null;
	private MapView mapView = null;
	
	private Intent intentService = null;
	private String jsonStringSearch = "";
	private ArrayList<SearchItem> listLocations = new ArrayList<SearchItem>();
	private Task mapTask = null;
	
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		loadOptions();
		// Quitar barra de arriba.
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
				WindowManager.LayoutParams.FLAG_FULLSCREEN);
		// Aplicar layout
		setContentView(R.layout.disfrutar);
		
		//Creamos la tarea y la lazamos
	//	mapTask = new Task();
		//mapTask.execute(2500);
		
		//Creamos el 'checkin'
		checkIn = new Checkin();
		//Accedemos al MapView
		mapView = (MapView) findViewById(R.id.mapview);
		mapView.setBuiltInZoomControls(true);
		mapView.setHorizontalScrollBarEnabled(true);
		mapView.setVerticalScrollBarEnabled(true);
		mapView.setHorizontalFadingEdgeEnabled(true);
		mapView.setVerticalFadingEdgeEnabled(true);
		//Obtenemos el controlador del mapa
		mapController = mapView.getController();
		mapController.setZoom(3);
		mapController.setCenter(new GeoPoint(39.47, -0.37));
		

		
		
		//Nos vamos hacia el punto detectado por el GPS				
		
	}

	/**
	 * OnClick para el botón de Check-in
	 * @param v
	 */
	public void checkInOnClick(View v){
		
		try {
			checkIn.make_checkin(getParent(), null);
			Toast toastOk = Toast.makeText(getParent(), getResources().getString(R.string.checkin_ok),Toast.LENGTH_SHORT );
			toastOk.show();
			//management.createCoordsInfo(GlobalParameters., longitude, latitude, description)
		} catch (Exception e) {
			Toast toastErr = Toast.makeText(getParent(), getResources().getString(R.string.checkin_error),Toast.LENGTH_SHORT );
			toastErr.show();
			e.printStackTrace();
		}
	}
	
	/**
	 * OnClick para el botón de 'add'
	 * @param v
	 */
	public void add_OnClick(View v){
		
	}
	
	
	/**
	 * OnClick para el botón de 'on'
	 * @param v
	 */
	public void on_OnClick(View v){
		ToggleButton tglOn = (ToggleButton) findViewById(R.id.tgbtn_on);
		if(tglOn.isChecked()){
			intentService = new Intent(DisfrutarActivity.this,TrackingLocalization.class);
			startService(intentService);
        
		}else{
			stopService(intentService);
		}
	}
	/**
	 * OnClick del toggleButton del hotel
	 * @param v
	 */
	public void hotel_OnClick(View v){
		hotel = ((ToggleButton)findViewById(R.id.tglbtn_hotel)).isChecked();
		Log.d("TAG_DISFRUTAR_BON_VOYAGE","hotel: "+hotel);
	}
	
	/**
	 * OnClick del toggleButton del hotel
	 * @param v
	 */
	public void restaurant_OnClick(View v){
		restaurant = ((ToggleButton)findViewById(R.id.tglbtn_restaurant)).isChecked();	
		Log.d("TAG_DISFRUTAR_BON_VOYAGE","restaurant: "+restaurant);

	}
	/**
	 * OnClick del toggleButton del bar
	 * @param v
	 */
	public void bar_OnClick(View v){
		bar = ((ToggleButton)findViewById(R.id.tglbtn_bar)).isChecked();
		Log.d("TAG_DISFRUTAR_BON_VOYAGE","bar: "+bar);

	}
	/**
	 * OnClick del toggleButton del museo
	 * @param v
	 */
	public void historical_OnClick(View v){
		historical = ((ToggleButton)findViewById(R.id.tglbtn_museum_historical)).isChecked();
		Log.d("TAG_DISFRUTAR_BON_VOYAGE","historical: "+historical);

	}
	/**
	 * OnClick del toggleButton del transporte
	 * @param v
	 */
	public void transport_OnClick(View v){
		transport = ((ToggleButton)findViewById(R.id.tglbtn_transport)).isChecked();
		Log.d("TAG_DISFRUTAR_BON_VOYAGE","transport: "+transport);

	}

	
	/*
	 * Con los siguientes métodos guardamos de manera persistente las opciones
	 * que el usuario ha seleccionado para filtrar la búsqueda en el mapa
	 */
	
	/**
	 * Método genérico para guardar las opciones en el shared preferences
	 */
	protected void saveOptions(){
		SharedPreferences preferences = getSharedPreferences(PREFERENCES_DISFRUTAR, 0);
		Editor preferences_editor = preferences.edit();
		
		preferences_editor.putBoolean("Historico", historical);
		preferences_editor.putBoolean("Transporte", transport);
		preferences_editor.putBoolean("Hotel", hotel);
		preferences_editor.putBoolean("Restaurantes", restaurant);
		preferences_editor.putBoolean("Copas", bar);
		
		preferences_editor.commit();
	}
	
	/**
	 * Método genérico para cargar las opciones del shared preferences
	 */
	protected void loadOptions(){
		SharedPreferences preferences = getSharedPreferences(PREFERENCES_DISFRUTAR, 0);

		historical = preferences.getBoolean("Historico", false);
		historical = preferences.getBoolean("Transporte", false);
		historical = preferences.getBoolean("Hotel", false);
		historical = preferences.getBoolean("Restaurantes", false);
		historical = preferences.getBoolean("Copas", false);
	}
	
	
	
	
	/**
	 * Cuando el usuario pulse back, guardamos las preferences
	 */
	
	@Override
	public void onBackPressed() {
		// TODO Auto-generated method stub
		super.onBackPressed();
		mapTask.cancel(true);
		saveOptions();
	}

	/***
	 * Sobrecarga de métodos del ciclo de vida
	 */
	@Override
	protected void onDestroy() {
		// TODO Auto-generated method stub
		saveOptions();
		mapTask.cancel(true);
		super.onDestroy();
	}

	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		saveOptions();
		mapTask.cancel(true);
		super.onPause();
	}

	@Override
	protected void onRestart() {
		// TODO Auto-generated method stub
		saveOptions();
		super.onRestart();
		loadOptions();
	}

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		loadOptions();

	}

	@Override
	protected void onStart() {
		// TODO Auto-generated method stub
		super.onStart();
		loadOptions();
	}

	@Override
	protected void onStop() {
		// TODO Auto-generated method stub
		saveOptions();
		mapTask.cancel(true);
		super.onStop();
	}
	
	/**
	 * Tarea asíncrona para actualizar el mapa
	 * 
	 */
	
	private class Task extends AsyncTask<Integer, Integer, Long> {

		@Override
		protected void onProgressUpdate(Integer... values) {
			super.onProgressUpdate(values);
		}

		@Override
		protected Long doInBackground(Integer... args) {

			// Para las coordenadas
			double coorLat = 0.0;
			double coorLon = 0.0;
			// Para las busquedas
			Search busqueda;
			SearchResponse busquedaResponse;

		



			// CITY|REGION|COUNTRY|CONTINENT|NATURAL|CULTURAL|POI|INFRASTRUCTURE|HOTEL|RESTAURANT|PUB|DISCO

			jsonStringSearch = "CITY|REGION|COUNTRY|CONTINENT";
			if(hotel){
				jsonStringSearch+="|HOTEL";
			}else if(restaurant){
				jsonStringSearch+="|RESTAURANT";
			}else if(bar){
				jsonStringSearch+="|PUB|DISCO";
			}else if(historical){
				jsonStringSearch+="|NATURAL|CULTURAL|POI";
			}else if(transport){
				jsonStringSearch+="|INFRASTRUCTURE";
			}

			// ---------------------------------------//
			// Bucle de tracking
			while (!isCancelled()) {
				try {
						coorLat = GlobalParameters.my_latitude;
						coorLon = GlobalParameters.my_longitude;

						mapController.animateTo(new GeoPoint(coorLat, coorLon));
						// ---------------------------------------//
						// Busco informacion alrededor mio
						busqueda = new Search(GlobalParameters.BASE_URL_JSON);
						busquedaResponse = busqueda
								.location(
										coorLat,
										coorLon,
										GlobalParameters.API_KEY,
										jsonStringSearch,
										"");

						//Overlays con icono de hotel
						DisfrutarMapPoints hotelMapPoints = new DisfrutarMapPoints(getResources().getDrawable(R.drawable.hotel),
								new DefaultResourceProxyImpl(getApplicationContext()),getApplicationContext());
						
						//Overlays con icono de restaurante
						DisfrutarMapPoints restaurantMapPoints = new DisfrutarMapPoints(getResources().getDrawable(R.drawable.restaurant),
								new DefaultResourceProxyImpl(getApplicationContext()),getApplicationContext());
						
						//Overlays con icono de bar
						DisfrutarMapPoints barMapPoints = new DisfrutarMapPoints(getResources().getDrawable(R.drawable.bar),
								new DefaultResourceProxyImpl(getApplicationContext()),getApplicationContext());
						
						//Overlays con icono de museo/poi/cultural
						DisfrutarMapPoints historicalMapPoints = new DisfrutarMapPoints(getResources().getDrawable(R.drawable.museum_historical),
								new DefaultResourceProxyImpl(getApplicationContext()),getApplicationContext());
						
						//Overlays con icono de transporte
						DisfrutarMapPoints transportMapPoints = new DisfrutarMapPoints(getResources().getDrawable(R.drawable.transport),
								new DefaultResourceProxyImpl(getApplicationContext()),getApplicationContext());
						
						
						
						//Obtengo los resultados
						listLocations = busquedaResponse.getResult();
						//Obtengo la lista de overlays del mapa
						List<Overlay> listOverlays= mapView.getOverlays();
											
						
						/*
						 * Recorremos la lista de lugares, y vamos añadiendo
						 * aquellos que tenemos activados. 
						 */
						for(SearchItem item : listLocations){
							if(hotel){
								if(item.getPlace_type().equals("HOTEL")){
									
									hotelMapPoints.addOverlay(new OverlayItem(item.getName(), item.getPlace_type(), new GeoPoint(item.getLatitude(), item.getLongitude())));
								}
							}else if(restaurant){
								if(item.getPlace_type().equals("RESTAURANT")){
									
									restaurantMapPoints.addOverlay(new OverlayItem(item.getName(), item.getPlace_type(), new GeoPoint(item.getLatitude(), item.getLongitude())));

								}
							}else if(bar){
								if(item.getPlace_type().equals("PUB") ||
										item.getPlace_type().equals("DISCO")){
									barMapPoints.addOverlay(new OverlayItem(item.getName(), item.getPlace_type(), new GeoPoint(item.getLatitude(), item.getLongitude())));

								}
								
							}else if(historical){
								if(item.getPlace_type().equals("NATURAL") ||
										item.getPlace_type().equals("CULTURAL") ||
										item.getPlace_type().equals("POI")){
	
									historicalMapPoints.addOverlay(new OverlayItem(item.getName(), item.getPlace_type(), new GeoPoint(item.getLatitude(), item.getLongitude())));

								}
							}else if(transport){
								if(item.getPlace_type().equals("INFRASTRUCTURE")){
									transportMapPoints.addOverlay(new OverlayItem(item.getName(), item.getPlace_type(), new GeoPoint(item.getLatitude(), item.getLongitude())));

								}
							}
						}//End for
					
						
					listOverlays.clear();
					listOverlays.add(hotelMapPoints);
					listOverlays.add(restaurantMapPoints);
					listOverlays.add(barMapPoints);
					listOverlays.add(historicalMapPoints);
					listOverlays.add(transportMapPoints);
					
					Thread.sleep(args[0]);

				} catch (Exception e) {
					Log.e("", e.getMessage());
				}
			}
			return null;
		}
	}
	
}
