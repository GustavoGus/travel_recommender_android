package adm.Twitter;

import java.util.List;

import oauth.signpost.OAuth;
import oauth.signpost.OAuthProvider;
import oauth.signpost.basic.DefaultOAuthProvider;
import oauth.signpost.commonshttp.CommonsHttpOAuthConsumer;
import twitter4j.IDs;
import twitter4j.Query;
import twitter4j.QueryResult;
import twitter4j.Status;
import twitter4j.Twitter;
import twitter4j.TwitterException;
import twitter4j.TwitterFactory;
import twitter4j.http.AccessToken;
import android.app.ProgressDialog;
import android.content.Context;
import android.net.Uri;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.widget.Toast;

/**
 * Comprobamos si tenemos en shared preferences ya guardado el accessToken. Si
 * no es así, creamos la ventana para dar permisos a la aplicación y recuperamos
 * el token de la url de vuelta. Después llamamos a configureToken.
 * Si ya teníamos accessToken en shared preferences, llamamos directamente a
 * configureToken.
 */

public class TwitterJ {
	private Twitter twitter;
	private TwitterJCredentials session;
	private AccessToken accessToken;
	private CommonsHttpOAuthConsumer consumer;
	private OAuthProvider provider;

	private ProgressDialog pdialog;
	private Context context;
	private QueryResult result;

	private static final String consumerKey = "e9U9c2NF1nJ1vfRg5rrY1g";
	private static final String secretKey = "QxJzrJcKAl1UgqDeZ8SKeyDUpkMnyXcc5oKwU8vuG0";

	private static final String REQUEST_URL = "https://api.twitter.com/oauth/request_token";
	private static final String ACCESS_TOKEN_URL = "https://api.twitter.com/oauth/access_token";
	private static final String AUTH_URL = "https://api.twitter.com/oauth/authorize";
	public static final String CALLBACK_URL = "myapp://twitter";

	public TwitterJ(Context context) {
		super();
		this.context = context;

		pdialog = new ProgressDialog(context);
		twitter = new TwitterFactory().getInstance();

		consumer = new CommonsHttpOAuthConsumer(consumerKey, secretKey);
		provider = new DefaultOAuthProvider(REQUEST_URL, ACCESS_TOKEN_URL,
				AUTH_URL);
		session = new TwitterJCredentials(context);
		accessToken = session.getAccessToken();

		configureToken();
	}

	@SuppressWarnings("deprecation")
	private void configureToken() {
		if (accessToken != null) {
			twitter.setOAuthConsumer(consumerKey, secretKey);
			twitter.setOAuthAccessToken(accessToken);
		}
	}

	public void resetAccessToken() {
		if (accessToken != null) {
			session.resetAccessToken();
			accessToken = null;
		}
	}

	public boolean hasAccessToken() {
		if (accessToken != null)
			return true;
		else
			return false;
	}

	public void authorize() {
		pdialog.setMessage("Cargando ...");
		pdialog.show();

		new Thread() {
			@Override
			public void run() {
				String authUrl = "";
				int what = 1;
				try {
					authUrl = provider.retrieveRequestToken(consumer,
							CALLBACK_URL);
					what = 0;
				} catch (Exception e) {
					e.printStackTrace();
				}

				handler.sendMessage(handler
						.obtainMessage(what, 1, 0, authUrl));
			}
		}.start();
	}

	public void processToken(String callbackUrl) {
		pdialog.setMessage("Cargando ...");
		pdialog.show();

		final String verifier = getVerifier(callbackUrl);

		new Thread() {
			@Override
			public void run() {
				int what = 1;

				try {
					provider.retrieveAccessToken(consumer, verifier);
					accessToken = new AccessToken(consumer.getToken(),
							consumer.getTokenSecret());
					configureToken();
					twitter.verifyCredentials();
					session.storeAccessToken(accessToken);
					what = 0;
				} catch (Exception e) {
					e.printStackTrace();
				}

				handler.sendMessage(handler.obtainMessage(what, 2, 0));
			}
		}.start();
	}

	private String getVerifier(String callbackUrl) {
		String verifier = "";
		Uri uri = Uri.parse(callbackUrl);
		if (uri != null && uri.toString().startsWith(CALLBACK_URL)) {
			Log.d("UriToString", uri.toString());
			verifier = uri.getQueryParameter(OAuth.OAUTH_VERIFIER);
			Log.d("Verifier", verifier);
		}
		return verifier;
	}

	private void showLoginDialog(String url) {
		final TwitterDialogListener listener = new TwitterDialogListener() {

			public void onComplete(String value) {
				processToken(value);
			}

			public void onError(String value) {
				Toast.makeText(context, "Fallo cargando la página",
						Toast.LENGTH_LONG).show();

			}
		};

		new TwitterJDialog(context, url, listener).show();
	}
	
	public interface TwitterDialogListener {
		public void onComplete(String value);
		public void onError(String value);
	}

	public void newTweet(final String tweet) {
		new Thread() {
			@Override
			public void run() {
				int what = 0;
				try {
					twitter.updateStatus(tweet);
				} catch (Exception e) {
					what = 2;
				}
				handler.sendMessage(handler.obtainMessage(what));
			}
		}.start();
	}

	public QueryResult searchTweet(final String squery) {
		try {
			Query query = new Query(squery);
			return twitter.search(query);
		} catch (TwitterException e) {
			e.printStackTrace();
			Toast.makeText(context, "Consulta fallada", Toast.LENGTH_LONG);
		}
		return null;
	}
	
	public List<Status> getTimeLine(){
	    try {
			return twitter.getFriendsTimeline();
		} catch (TwitterException e) {
			e.printStackTrace();
		}
	    return null;
	}
	
	public IDs searchFriends(){
		try {
			return twitter.getFriendsIDs(); 
		} catch (TwitterException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	private Handler handler = new Handler() {
		@Override
		public void handleMessage(Message msg) {
			pdialog.dismiss();

			if (msg.what == 1) {
				if (msg.arg1 == 1)
					Toast.makeText(context, "Error adquiriendo request token",
							Toast.LENGTH_LONG).show();
				else
					Toast.makeText(context, "Error adquiriendo access token",
							Toast.LENGTH_LONG).show();

			} else if (msg.what == 2) {
				Toast.makeText(context, "Error publicando tweet",
						Toast.LENGTH_LONG).show();
			} else {
				if (msg.arg1 == 1)
					showLoginDialog((String) msg.obj);
				else
					Toast.makeText(context, "Conectado a Twitter ",
							Toast.LENGTH_LONG).show();

			}
		}
	};

}
